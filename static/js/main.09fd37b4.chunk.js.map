{"version":3,"sources":["firebase.js","auth.js","contexts.js","componenets/ProviderLogin.js","componenets/Card.js","state.js","reducer.js","componenets/Popup.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","loginWithProvider","a","providerId","Promise","resolve","reject","provider","OAuthProvider","currentUser","signInWithPopup","then","result","user","console","log","person","displayName","email","photoURL","addUserToCollection","catch","err","db","firestore","users","collection","add","StateContext","React","createContext","DispatchContext","ProviderLogin","dispatch","useContext","isLoading","isLoggedIn","useState","val","setVal","onAuthStateChanged","useIsLoggedIn","handleLogout","signOut","type","alert","handleLogin","payload","Button","color","variant","onClick","e","Card","CardHeader","avatar","Skeleton","animation","width","height","Avatar","src","action","IconButton","aria-label","title","style","marginBottom","subheader","INITIAL_STATE","error","reducer","state","Popup","open","setOpen","useEffect","Snackbar","anchorOrigin","vertical","horizontal","TransitionComponent","Slide","onClose","autoHideDuration","message","App","useReducer","setUser","useGetCurrentUser","Provider","value","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09fd37b4.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCArYkJKKbQe20Y5-vk7pg3uBFupTom490\",\n  authDomain: \"react-firebase-auth-4c729.firebaseapp.com\",\n  databaseURL: \"https://react-firebase-auth-4c729.firebaseio.com\",\n  projectId: \"react-firebase-auth-4c729\",\n  storageBucket: \"react-firebase-auth-4c729.appspot.com\",\n  messagingSenderId: \"959197836531\",\n  appId: \"1:959197836531:web:ba1f0fdbe3a28a11353386\",\n  measurementId: \"G-2WYZ2T8DG3\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;\nexport const auth = firebase.auth();\n","import firebase, { auth } from \"./firebase\";\nimport { useState, useEffect } from \"react\";\n\nexport async function loginWithProvider(providerId = \"google.com\") {\n  return new Promise((resolve, reject) => {\n    const provider = new firebase.auth.OAuthProvider(providerId);\n    // Reject if provider not found\n    if (!provider) {\n      reject();\n      return;\n    }\n    //Don't login if the user is logged in\n    if (auth.currentUser) {\n      reject();\n      return;\n    }\n    auth\n      .signInWithPopup(provider)\n      .then((result) => {\n        const user = result.user;\n        console.log({ user });\n        const person = {\n          displayName: user.displayName,\n          email: user.email,\n          photoURL: user.photoURL,\n        };\n        addUserToCollection(person);\n        resolve(person);\n      })\n      .catch((err) => {\n        console.log({ err });\n        reject(err);\n      });\n  });\n}\n\nexport const useIsLoggedIn = () => {\n  const [val, setVal] = useState(false);\n  auth.onAuthStateChanged((user) => {\n    if (user) {\n      setVal(true);\n    }\n  });\n  return val;\n};\n\nexport const useGetCurrentUser = () => {\n  const [user, setUser] = useState(null);\n  // onAuthStateChanged needs to be called inside useEffect\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          const person = {\n            displayName: user.displayName,\n            email: user.email,\n            photoURL: user.photoURL,\n          };\n          console.log({ person });\n          setUser(person);\n        }\n      }),\n    []\n  );\n  return user;\n};\n\n//Add loggedIn user to `users` collection\nexport async function addUserToCollection(user) {\n  const db = firebase.firestore();\n  const users = db.collection(\"users\");\n  try {\n    await users.add(user);\n  } catch (error) {\n    console.log(\"User not added to collection\");\n  }\n}\n","import React from \"react\";\n\nexport const StateContext = React.createContext();\nexport const DispatchContext = React.createContext();\n","import React, { useContext } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { loginWithProvider, useIsLoggedIn } from \"../auth\";\nimport { DispatchContext, StateContext } from \"../contexts\";\nimport { auth } from \"../firebase\";\n\nfunction ProviderLogin() {\n  const dispatch = useContext(DispatchContext);\n  const { isLoading } = useContext(StateContext);\n  const isLoggedIn = useIsLoggedIn();\n\n  const handleLogout = () => {\n    auth\n      .signOut()\n      .then(() => dispatch({ type: \"USER_LOGOUT\" }))\n      .catch((err) => alert(err));\n  };\n\n  const handleLogin = async (providerId) => {\n    dispatch({ type: \"USER_LOGIN_REQUEST\" });\n    loginWithProvider(providerId)\n      .then((user) => {\n        dispatch({\n          type: \"USER_LOGIN_SUCCESS\",\n          payload: user,\n        });\n      })\n      .catch((err) => dispatch({ type: \"USER_LOGIN_FAILURE\", payload: err }));\n  };\n\n  return (\n    <div>\n      <Button\n        color=\"primary\"\n        variant=\"outlined\"\n        onClick={(e) => {\n          isLoggedIn ? handleLogout() : handleLogin(\"google.com\");\n        }}\n      >\n        {isLoggedIn\n          ? \"Logout\"\n          : isLoading\n          ? \"Logging in...\"\n          : \"Login with Google\"}\n      </Button>\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        onClick={(e) => {\n          isLoggedIn ? handleLogout() : handleLogin(\"facebook.com\");\n        }}\n      >\n        {isLoggedIn\n          ? \"Logout\"\n          : isLoading\n          ? \"Logging in...\"\n          : \"Login with Facebook\"}\n      </Button>\n    </div>\n  );\n}\n\nexport default ProviderLogin;\n","import React, { useContext } from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport { CardHeader, Avatar } from \"@material-ui/core\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport { StateContext } from \"../contexts\";\n\nfunction Card() {\n  const { user, isLoading } = useContext(StateContext);\n  return (\n    <div>\n      <CardHeader\n        avatar={\n          isLoading ? (\n            <Skeleton\n              animation=\"pulse\"\n              variant=\"circle\"\n              width={40}\n              height={40}\n            />\n          ) : (\n            <Avatar src={user && user.photoURL}>\n              <PersonIcon />\n            </Avatar>\n          )\n        }\n        action={\n          <IconButton aria-label=\"settings\">\n            <MoreVertIcon />\n          </IconButton>\n        }\n        title={\n          isLoading ? (\n            <Skeleton\n              animation=\"wave\"\n              height={10}\n              width=\"20%\"\n              style={{ marginBottom: 6 }}\n            />\n          ) : user && user.displayName ? (\n            user.displayName\n          ) : (\n            \"Full Name\"\n          )\n        }\n        subheader={\n          isLoading ? (\n            <Skeleton animation=\"wave\" height={10} width=\"10%\" />\n          ) : user && user.email ? (\n            user.email\n          ) : (\n            \"Email\"\n          )\n        }\n      />\n    </div>\n  );\n}\n\nexport default Card;\n","export const INITIAL_STATE = {\n  isLoading: false,\n  error: null,\n  user: null,\n};\n","import { INITIAL_STATE } from \"./state\";\n\nconst reducer = (state = INITIAL_STATE, { type, payload }) => {\n  console.log({ type });\n  console.log({ payload });\n  switch (type) {\n    case \"USER_LOGIN_REQUEST\":\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case \"USER_LOGIN_SUCCESS\":\n      return {\n        ...state,\n        user: payload,\n        isLoading: false,\n      };\n    case \"USER_LOGIN_FAILURE\":\n      return {\n        ...state,\n        error: payload,\n        isLoading: false,\n      };\n    case \"USER_LOGOUT\":\n      return {\n        ...state,\n        user: null,\n      };\n    case \"GET_CURRENT_USER\":\n      return {\n        ...state,\n        user: payload,\n      };\n    case \"CLEAR_ERROR\":\n      return {\n        ...state,\n        error: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { Snackbar, Slide } from \"@material-ui/core\";\nimport { StateContext } from \"../contexts\";\n\nfunction Popup() {\n  const [open, setOpen] = useState(false);\n  const { error } = useContext(StateContext);\n\n  useEffect(() => {\n    if (error != null) {\n      setOpen(true);\n    }\n  }, [error]);\n\n  return (\n    <Snackbar\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n      TransitionComponent={Slide}\n      open={open}\n      onClose={() => setOpen(false)}\n      autoHideDuration={4000}\n      message={error && error.message}\n    />\n  );\n}\n\nexport default Popup;\n","import React, { useReducer, useEffect, useState } from \"react\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport ProviderLogin from \"./componenets/ProviderLogin\";\nimport Card from \"./componenets/Card\";\nimport { StateContext, DispatchContext } from \"./contexts\";\nimport { useGetCurrentUser } from \"./auth\";\nimport reducer from \"./reducer\";\nimport { INITIAL_STATE } from \"./state\";\nimport Popup from \"./componenets/Popup\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n  const user = useGetCurrentUser();\n\n  useEffect(() => {\n    console.log({ user });\n    dispatch({ type: \"GET_CURRENT_USER\", payload: user });\n  }, [user]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <CssBaseline />\n        <Card />\n        <Popup />\n        <ProviderLogin />\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}